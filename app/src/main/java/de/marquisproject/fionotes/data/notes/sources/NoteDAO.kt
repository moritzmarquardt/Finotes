package de.marquisproject.fionotes.data.notes.sources

import de.marquisproject.fionotes.data.notes.model.Note

import androidx.room.Dao
import androidx.room.Query
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.Update
import androidx.room.Upsert
import kotlinx.coroutines.flow.Flow


@Dao
interface NoteDAO {
    /**
     * Insert a new note into the database. Return the autogenerated id of the new note.
     * Upsert is not used because if a potential note in the bin database is restored with a id that already exists in the notes database, the note would be overwritten.
     * Suspend is used because it is a coroutine function and we use it here because no data is returned.
     * @param note Note object to be upsert
     * @return Long id of the note (either the new autogenerated id or the id of the updated note)
     */
    @Insert
    suspend fun insertNote(note: Note) : Long

    /**
     * Update an existing note in the database.
     * Suspend is used because it is a coroutine function and we use it here because no data is returned.
     * @param note Note object to be updated
     */
    @Update
    suspend fun updateNote(note: Note)

    /**
     * Delete a note from the database.
     * Suspend is used because it is a coroutine function and we use it here because no data is returned.
     * @param note Note object to be deleted
     */
    @Delete
    suspend fun deleteNote(note: Note)

    /**
     * With flow we get an observable which will notify us when there is a change in the database.
     * @return Flow of List of Notes ordered by lastEdited in descending order
     */
    @Query("SELECT * FROM notes_table ORDER BY isPinned DESC, dateCreated DESC")
    fun getAllNotes(): Flow<List<Note>>

    /**
     * With flow we get an observable which will notify us when there is a change in the database.
     * @param searchQuery String to search for in the title or body of the notes
     * @return Flow of List of Notes ordered by lastEdited in descending order
     */
    @Query("SELECT * FROM notes_table WHERE title LIKE '%' || :searchQuery || '%' OR body LIKE '%' || :searchQuery || '%' ORDER BY isPinned DESC, dateCreated DESC")
    fun getNotesWithQuery(searchQuery: String): Flow<List<Note>>
}